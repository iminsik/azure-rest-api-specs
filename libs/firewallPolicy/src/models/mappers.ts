/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const SubResource: msRest.CompositeMapper = {
  serializedName: "SubResource",
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyThreatIntelWhitelist: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyThreatIntelWhitelist",
  type: {
    name: "Composite",
    className: "FirewallPolicyThreatIntelWhitelist",
    modelProperties: {
      ipAddresses: {
        serializedName: "ipAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      fqdns: {
        serializedName: "fqdns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DnsSettings: msRest.CompositeMapper = {
  serializedName: "DnsSettings",
  type: {
    name: "Composite",
    className: "DnsSettings",
    modelProperties: {
      servers: {
        serializedName: "servers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      enableProxy: {
        serializedName: "enableProxy",
        type: {
          name: "Boolean"
        }
      },
      requireProxyForNetworkRules: {
        nullable: true,
        serializedName: "requireProxyForNetworkRules",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FirewallPolicyIntrusionDetectionSignatureSpecification: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyIntrusionDetectionSignatureSpecification",
  type: {
    name: "Composite",
    className: "FirewallPolicyIntrusionDetectionSignatureSpecification",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyIntrusionDetectionBypassTrafficSpecifications: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyIntrusionDetectionBypassTrafficSpecifications",
  type: {
    name: "Composite",
    className: "FirewallPolicyIntrusionDetectionBypassTrafficSpecifications",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      sourceAddresses: {
        serializedName: "sourceAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationAddresses: {
        serializedName: "destinationAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationPorts: {
        serializedName: "destinationPorts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sourceIpGroups: {
        serializedName: "sourceIpGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationIpGroups: {
        serializedName: "destinationIpGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const FirewallPolicyIntrusionDetectionConfiguration: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyIntrusionDetectionConfiguration",
  type: {
    name: "Composite",
    className: "FirewallPolicyIntrusionDetectionConfiguration",
    modelProperties: {
      signatureOverrides: {
        serializedName: "signatureOverrides",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallPolicyIntrusionDetectionSignatureSpecification"
            }
          }
        }
      },
      bypassTrafficSettings: {
        serializedName: "bypassTrafficSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallPolicyIntrusionDetectionBypassTrafficSpecifications"
            }
          }
        }
      }
    }
  }
};

export const FirewallPolicyIntrusionDetection: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyIntrusionDetection",
  type: {
    name: "Composite",
    className: "FirewallPolicyIntrusionDetection",
    modelProperties: {
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      configuration: {
        serializedName: "configuration",
        type: {
          name: "Composite",
          className: "FirewallPolicyIntrusionDetectionConfiguration"
        }
      }
    }
  }
};

export const FirewallPolicyCertificateAuthority: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyCertificateAuthority",
  type: {
    name: "Composite",
    className: "FirewallPolicyCertificateAuthority",
    modelProperties: {
      keyVaultSecretId: {
        serializedName: "keyVaultSecretId",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyTransportSecurity: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyTransportSecurity",
  type: {
    name: "Composite",
    className: "FirewallPolicyTransportSecurity",
    modelProperties: {
      certificateAuthority: {
        serializedName: "certificateAuthority",
        type: {
          name: "Composite",
          className: "FirewallPolicyCertificateAuthority"
        }
      }
    }
  }
};

export const ManagedServiceIdentityUserAssignedIdentitiesValue: msRest.CompositeMapper = {
  serializedName: "ManagedServiceIdentity_userAssignedIdentitiesValue",
  type: {
    name: "Composite",
    className: "ManagedServiceIdentityUserAssignedIdentitiesValue",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      clientId: {
        readOnly: true,
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: msRest.CompositeMapper = {
  serializedName: "ManagedServiceIdentity",
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "SystemAssigned",
            "UserAssigned",
            "SystemAssigned, UserAssigned",
            "None"
          ]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ManagedServiceIdentityUserAssignedIdentitiesValue"
            }
          }
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const FirewallPolicy: msRest.CompositeMapper = {
  serializedName: "FirewallPolicy",
  type: {
    name: "Composite",
    className: "FirewallPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      ruleCollectionGroups: {
        readOnly: true,
        serializedName: "properties.ruleCollectionGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      basePolicy: {
        serializedName: "properties.basePolicy",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      firewalls: {
        readOnly: true,
        serializedName: "properties.firewalls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      childPolicies: {
        readOnly: true,
        serializedName: "properties.childPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      threatIntelMode: {
        serializedName: "properties.threatIntelMode",
        type: {
          name: "String"
        }
      },
      threatIntelWhitelist: {
        serializedName: "properties.threatIntelWhitelist",
        type: {
          name: "Composite",
          className: "FirewallPolicyThreatIntelWhitelist"
        }
      },
      dnsSettings: {
        serializedName: "properties.dnsSettings",
        type: {
          name: "Composite",
          className: "DnsSettings"
        }
      },
      intrusionDetection: {
        serializedName: "properties.intrusionDetection",
        type: {
          name: "Composite",
          className: "FirewallPolicyIntrusionDetection"
        }
      },
      transportSecurity: {
        serializedName: "properties.transportSecurity",
        type: {
          name: "Composite",
          className: "FirewallPolicyTransportSecurity"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      }
    }
  }
};

export const FirewallPolicyRuleCollection: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyRuleCollection",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "ruleCollectionType",
      clientName: "ruleCollectionType"
    },
    uberParent: "FirewallPolicyRuleCollection",
    className: "FirewallPolicyRuleCollection",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        constraints: {
          InclusiveMaximum: 65000,
          InclusiveMinimum: 100
        },
        type: {
          name: "Number"
        }
      },
      ruleCollectionType: {
        required: true,
        serializedName: "ruleCollectionType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyRuleCollectionGroup: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyRuleCollectionGroup",
  type: {
    name: "Composite",
    className: "FirewallPolicyRuleCollectionGroup",
    modelProperties: {
      ...SubResource.type.modelProperties,
      priority: {
        serializedName: "properties.priority",
        constraints: {
          InclusiveMaximum: 65000,
          InclusiveMinimum: 100
        },
        type: {
          name: "Number"
        }
      },
      ruleCollections: {
        serializedName: "properties.ruleCollections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallPolicyRuleCollection"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyNatRuleCollectionAction: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyNatRuleCollectionAction",
  type: {
    name: "Composite",
    className: "FirewallPolicyNatRuleCollectionAction",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyRule: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyRule",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "ruleType",
      clientName: "ruleType"
    },
    uberParent: "FirewallPolicyRule",
    className: "FirewallPolicyRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      ruleType: {
        required: true,
        serializedName: "ruleType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyNatRuleCollection: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyNatRuleCollection",
  type: {
    name: "Composite",
    polymorphicDiscriminator: FirewallPolicyRuleCollection.type.polymorphicDiscriminator,
    uberParent: "FirewallPolicyRuleCollection",
    className: "FirewallPolicyNatRuleCollection",
    modelProperties: {
      ...FirewallPolicyRuleCollection.type.modelProperties,
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "FirewallPolicyNatRuleCollectionAction"
        }
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallPolicyRule"
            }
          }
        }
      }
    }
  }
};

export const FirewallPolicyFilterRuleCollectionAction: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyFilterRuleCollectionAction",
  type: {
    name: "Composite",
    className: "FirewallPolicyFilterRuleCollectionAction",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyFilterRuleCollection: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyFilterRuleCollection",
  type: {
    name: "Composite",
    polymorphicDiscriminator: FirewallPolicyRuleCollection.type.polymorphicDiscriminator,
    uberParent: "FirewallPolicyRuleCollection",
    className: "FirewallPolicyFilterRuleCollection",
    modelProperties: {
      ...FirewallPolicyRuleCollection.type.modelProperties,
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "FirewallPolicyFilterRuleCollectionAction"
        }
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallPolicyRule"
            }
          }
        }
      }
    }
  }
};

export const FirewallPolicyRuleApplicationProtocol: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyRuleApplicationProtocol",
  type: {
    name: "Composite",
    className: "FirewallPolicyRuleApplicationProtocol",
    modelProperties: {
      protocolType: {
        serializedName: "protocolType",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        constraints: {
          InclusiveMaximum: 64000,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ApplicationRule: msRest.CompositeMapper = {
  serializedName: "ApplicationRule",
  type: {
    name: "Composite",
    polymorphicDiscriminator: FirewallPolicyRule.type.polymorphicDiscriminator,
    uberParent: "FirewallPolicyRule",
    className: "ApplicationRule",
    modelProperties: {
      ...FirewallPolicyRule.type.modelProperties,
      sourceAddresses: {
        serializedName: "sourceAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationAddresses: {
        serializedName: "destinationAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      protocols: {
        serializedName: "protocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallPolicyRuleApplicationProtocol"
            }
          }
        }
      },
      targetFqdns: {
        serializedName: "targetFqdns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      targetUrls: {
        serializedName: "targetUrls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      fqdnTags: {
        serializedName: "fqdnTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sourceIpGroups: {
        serializedName: "sourceIpGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      terminateTLS: {
        serializedName: "terminateTLS",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NatRule: msRest.CompositeMapper = {
  serializedName: "NatRule",
  type: {
    name: "Composite",
    polymorphicDiscriminator: FirewallPolicyRule.type.polymorphicDiscriminator,
    uberParent: "FirewallPolicyRule",
    className: "NatRule",
    modelProperties: {
      ...FirewallPolicyRule.type.modelProperties,
      ipProtocols: {
        serializedName: "ipProtocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sourceAddresses: {
        serializedName: "sourceAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationAddresses: {
        serializedName: "destinationAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationPorts: {
        serializedName: "destinationPorts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      translatedAddress: {
        serializedName: "translatedAddress",
        type: {
          name: "String"
        }
      },
      translatedPort: {
        serializedName: "translatedPort",
        type: {
          name: "String"
        }
      },
      sourceIpGroups: {
        serializedName: "sourceIpGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const NetworkRule: msRest.CompositeMapper = {
  serializedName: "NetworkRule",
  type: {
    name: "Composite",
    polymorphicDiscriminator: FirewallPolicyRule.type.polymorphicDiscriminator,
    uberParent: "FirewallPolicyRule",
    className: "NetworkRule",
    modelProperties: {
      ...FirewallPolicyRule.type.modelProperties,
      ipProtocols: {
        serializedName: "ipProtocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sourceAddresses: {
        serializedName: "sourceAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationAddresses: {
        serializedName: "destinationAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationPorts: {
        serializedName: "destinationPorts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sourceIpGroups: {
        serializedName: "sourceIpGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationIpGroups: {
        serializedName: "destinationIpGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationFqdns: {
        serializedName: "destinationFqdns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const FirewallPolicyListResult: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyListResult",
  type: {
    name: "Composite",
    className: "FirewallPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallPolicyRuleCollectionGroupListResult: msRest.CompositeMapper = {
  serializedName: "FirewallPolicyRuleCollectionGroupListResult",
  type: {
    name: "Composite",
    className: "FirewallPolicyRuleCollectionGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallPolicyRuleCollectionGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudErrorBody: msRest.CompositeMapper = {
  serializedName: "CloudErrorBody",
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      }
    }
  }
};

export const CloudError: msRest.CompositeMapper = {
  serializedName: "CloudError",
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const discriminators = {
  'FirewallPolicyRuleCollection' : FirewallPolicyRuleCollection,
  'FirewallPolicyRule' : FirewallPolicyRule,
  'FirewallPolicyRuleCollection.FirewallPolicyNatRuleCollection' : FirewallPolicyNatRuleCollection,
  'FirewallPolicyRuleCollection.FirewallPolicyFilterRuleCollection' : FirewallPolicyFilterRuleCollection,
  'FirewallPolicyRule.ApplicationRule' : ApplicationRule,
  'FirewallPolicyRule.NatRule' : NatRule,
  'FirewallPolicyRule.NetworkRule' : NetworkRule

};
